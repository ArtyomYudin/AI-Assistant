import gradio as gr
from classes.rag_core import RAGCore
import asyncio

# –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio, —Ç–∞–∫ –∫–∞–∫ Gradio –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ Jupyter/–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π event loop
# nest_asyncio.apply()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAGCore
rag = RAGCore(
    llm_base_url="http://172.20.4.50:8001/v1",
    embedding_base_url="http://172.20.4.50:8000/v1",
    collection_name="demo_ci_rag"
)


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã
def initialize_rag():
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    docs = rag.load_documents_from_directory()
    if docs:
        print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î...")
        rag.setup_vectorstore(docs)
        rag.create_retriever()
        rag.setup_qa_chain()
        print("RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞.")
    else:
        print("–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É scraped_data.")


# –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
initialize_rag()


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º
async def rag_stream(question: str, history: list):
    session_id = "gradio_demo_session"  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å hash –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    full_response = ""
    async for chunk in rag.qa_chain_with_history.astream(
            {"question": question},
            config={"configurable": {"session_id": session_id}}
    ):
        full_response += chunk
        # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        yield full_response

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–µ—Ü
    # yield full_response


# Gradio ChatInterface
demo = gr.ChatInterface(
    fn=rag_stream,
    type="messages",  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    chatbot=gr.Chatbot(
        height=600,
        # avatar_images=["üë§", "ü§ñ"],  # –ò–∫–æ–Ω–∫–∏
        show_copy_button=False,
        type="messages",
    ),
    textbox=gr.Textbox(
        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...",
        container=False,
        scale=7,
    ),

    title="RAG –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç ‚Äî –ê–û ¬´–¶–µ–Ω—Ç—Ä–ò–Ω—Ñ–æ—Ä–º¬ª",
    description="""
    <center>
        <b>–î–µ–º–æ-–≤–µ—Ä—Å–∏—è RAG-—Å–∏—Å—Ç–µ–º—ã</b><br>
        –û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ <code>Milvus + vLLM + LangChain</code><br>
        –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏–∏.
    </center>
    """,
    examples=[
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –ê–û ¬´–¶–µ–Ω—Ç—Ä–ò–Ω—Ñ–æ—Ä–º¬ª?",
        "–ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è?",
        "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
    ],
    theme="soft",
)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    demo.launch(
        server_name="0.0.0.0",  # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        server_port=7860,
        share=False,  # True ‚Äî –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
        debug=True,
    )