import gradio as gr
import asyncio, json
from typing import List

from config.rag_config import RAGConfig
from core.rag_core import RAGCore
from core.eval import stream_answer_and_evaluate

cfg = RAGConfig()
core = RAGCore(cfg)
core.create_retriever(k=cfg.K, fetch_k=cfg.FETCH_K)
core.create_qa_generator()

async def chat_answer_stream(message, history, session_id="gradio"):
    full_response = ""
    async for chunk in core.qa_chain_with_history(message, session_id=session_id):
        full_response += chunk
        yield full_response
        # yield chunk

async def test_answer_stream(message, keywords_csv, history, session_id="gradio-test"):
    expected = [k.strip() for k in (keywords_csv or "").split(",") if k.strip()]
    full_response = ""
    async for chunk in stream_answer_and_evaluate(core, message, expected, session_id=session_id):
        if chunk.startswith("\n\n[METRICS]"):
            try:
                metrics = json.loads(chunk.replace("\n\n[METRICS]",""))
                pretty = (f"\n\n‚è± {metrics['duration_sec']}s  |  "
                          f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {metrics['keywords_found']}/{metrics['keywords_total']}  |  "
                          f"–ü–æ–∫—Ä—ã—Ç–∏–µ: {metrics['coverage_percent']}%\n"
                          f"–î–µ—Ç–∞–ª–∏: {metrics['found_map']}")
                yield pretty
            except Exception:
                yield "\n\n[–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏]"
        else:
            full_response += chunk
            yield full_response
            # yield chunk

with gr.Blocks(title="RAG ‚Äî Streaming UI") as demo:
    gr.Markdown("## üîé RAG QA (Streaming)")
    with gr.Tab("–î–∏–∞–ª–æ–≥"):
        gr.ChatInterface(fn=chat_answer_stream, type="messages", title="QA")
    with gr.Tab("–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"):
        prompt = gr.Textbox(label="–í–æ–ø—Ä–æ—Å")
        keywords = gr.Textbox(label="–û–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
        out = gr.Textbox(label="–°—Ç—Ä–∏–º –æ—Ç–≤–µ—Ç–∞ + –º–µ—Ç—Ä–∏–∫–∏", lines=12)
        btn = gr.Button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Å—Ç—Ä–∏–º–∏—Ç—å –æ—Ç–≤–µ—Ç")
        btn.click(fn=test_answer_stream, inputs=[prompt, keywords, out], outputs=out)

if __name__ == "__main__":
    demo.queue().launch()
